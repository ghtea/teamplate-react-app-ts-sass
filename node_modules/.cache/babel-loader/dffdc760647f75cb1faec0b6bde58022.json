{"ast":null,"code":"import produce from 'immer';\nimport { handleActions } from 'redux-actions';\nimport * as actionsAuth from 'store/actions/auth';\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject'; //import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n// https://react-etc.vlpt.us/07.typescript-redux.html\n\nconst stateInitial = {\n  user: {\n    _id: '',\n    email: '',\n    twitter: '',\n    google: '',\n    type: 'normal',\n    joined: Date.now,\n    accessed: Date.now\n  }\n};\nconst reducerAuth = handleActions({\n  [actionsAuth.name__REPLACE]: (statePrevious, action) => {\n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) {\n        return;\n      } else {\n        const listKey = action.payload.listKey;\n\n        try {\n          putValueToNestedObject(stateNew, listKey, action.payload.replacement);\n        } catch {\n          return;\n        }\n      }\n    });\n  }\n}, stateInitial); // key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerAuth = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case auth.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\nexport default reducerAuth;\n/*\nconst authReducer = handleActions({\n  \n  \n  [auth.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/reducers/auth.ts"],"names":["produce","handleActions","actionsAuth","putValueToNestedObject","stateInitial","user","_id","email","twitter","google","type","joined","Date","now","accessed","reducerAuth","name__REPLACE","statePrevious","action","stateNew","payload","undefined","listKey","replacement"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAEA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AAEA,OAAOC,sBAAP,MAAmC,sCAAnC,C,CACA;AAGA;;AAMA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,GAAG,EAAE,EADD;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,OAAO,EAAE,EAHL;AAIJC,IAAAA,MAAM,EAAE,EAJJ;AAMJC,IAAAA,IAAI,EAAE,QANF;AAQJC,IAAAA,MAAM,EAAEC,IAAI,CAACC,GART;AASJC,IAAAA,QAAQ,EAAEF,IAAI,CAACC;AATX;AAFa,CAArB;AAmBA,MAAME,WAAW,GAAGd,aAAa,CAAa;AAE5C,GAACC,WAAW,CAACc,aAAb,GAA6B,CAACC,aAAD,EAAgBC,MAAhB,KAAsD;AAEjF,WAAOlB,OAAO,CAACiB,aAAD,EAAgBE,QAAQ,IAAI;AACxC,UAAID,MAAM,CAACE,OAAP,KAAmBC,SAAvB,EAAkC;AAChC;AACD,OAFD,MAGK;AACH,cAAMC,OAA4B,GAAGJ,MAAM,CAACE,OAAP,CAAeE,OAApD;;AAEA,YAAI;AAAEnB,UAAAA,sBAAsB,CAACgB,QAAD,EAAWG,OAAX,EAAoBJ,MAAM,CAACE,OAAP,CAAeG,WAAnC,CAAtB;AAEL,SAFD,CAGA,MAAM;AACJ;AACD;AAEF;AAEF,KAhBa,CAAd;AAiBD;AArB2C,CAAb,EAuB9BnB,YAvB8B,CAAjC,C,CA2BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeW,WAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import produce from 'immer';\nimport {handleActions} from 'redux-actions';\n\nimport * as actionsAuth from 'store/actions/auth';\n\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject';\n//import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n\n\n// https://react-etc.vlpt.us/07.typescript-redux.html\n\nexport type State = typeof stateInitial;\n\n\n\nconst stateInitial = {\n  \n  user: {\n    _id: '',\n    email: '',\n    twitter: '',\n    google: '',\n    \n    type: 'normal',\n    \n    joined: Date.now,\n    accessed: Date.now,\n  \n  }\n  \n};\n\n\n\nconst reducerAuth = handleActions<State, any>({\n  \n  [actionsAuth.name__REPLACE]: (statePrevious, action: actionsAuth.type__REPLACE) => {\n    \n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) { \n        return;\n      }\n      else {\n        const listKey: (string | number)[] = action.payload.listKey;\n        \n        try { putValueToNestedObject(stateNew, listKey, action.payload.replacement); \n          \n        }\n        catch {\n          return;\n        }\n        \n      }\n      \n    });\n  }\n  \n}, stateInitial);\n\n\n\n// key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerAuth = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case auth.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\n\n\nexport default reducerAuth;\n\n\n/*\nconst authReducer = handleActions({\n  \n  \n  [auth.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}