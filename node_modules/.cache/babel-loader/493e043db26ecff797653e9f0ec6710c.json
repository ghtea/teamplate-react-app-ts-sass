{"ast":null,"code":"// https://backend-intro.vlpt.us/6/04.html\n// 로컬 스토리지에 JSON 형태로 저장 / 불러오기 / 삭제 헬퍼\nconst storage = {\n  set: (key, value) => {\n    if (!localStorage) return;\n    localStorage[key] = typeof value === 'string' ? value : JSON.stringify(value);\n  },\n  get: key => {\n    if (!localStorage) return null;\n\n    if (!localStorage[key]) {\n      return null;\n    }\n\n    try {\n      const parsed = JSON.parse(localStorage[key]);\n      return parsed;\n    } catch (e) {\n      return localStorage[key];\n    }\n  },\n  remove: key => {\n    if (!localStorage) return null;\n\n    if (localStorage[key]) {\n      localStorage.removeItem(key);\n    }\n  }\n};\nexport default storage;","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/tools/vanilla/store.ts"],"names":["storage","set","key","value","localStorage","JSON","stringify","get","parsed","parse","e","remove","removeItem"],"mappings":"AAAA;AAEA;AACA,MAAMA,OAAO,GAAG;AACZC,EAAAA,GAAG,EAAE,CAACC,GAAD,EAAaC,KAAb,KAA4B;AAC7B,QAAG,CAACC,YAAJ,EAAkB;AAClBA,IAAAA,YAAY,CAACF,GAAD,CAAZ,GAAqB,OAAOC,KAAR,KAAmB,QAAnB,GAA8BA,KAA9B,GAAsCE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAA1D;AACH,GAJW;AAKZI,EAAAA,GAAG,EAAGL,GAAD,IAAgB;AACjB,QAAG,CAACE,YAAJ,EAAkB,OAAO,IAAP;;AAElB,QAAG,CAACA,YAAY,CAACF,GAAD,CAAhB,EAAuB;AACnB,aAAO,IAAP;AACH;;AAED,QAAI;AACA,YAAMM,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,YAAY,CAACF,GAAD,CAAvB,CAAf;AACA,aAAOM,MAAP;AACH,KAHD,CAGE,OAAME,CAAN,EAAS;AACP,aAAON,YAAY,CAACF,GAAD,CAAnB;AACH;AACJ,GAlBW;AAmBZS,EAAAA,MAAM,EAAGT,GAAD,IAAgB;AACpB,QAAG,CAACE,YAAJ,EAAkB,OAAO,IAAP;;AAElB,QAAGA,YAAY,CAACF,GAAD,CAAf,EAAsB;AAClBE,MAAAA,YAAY,CAACQ,UAAb,CAAwBV,GAAxB;AACH;AACJ;AAzBW,CAAhB;AA4BA,eAAeF,OAAf","sourcesContent":["// https://backend-intro.vlpt.us/6/04.html\n\n// 로컬 스토리지에 JSON 형태로 저장 / 불러오기 / 삭제 헬퍼\nconst storage = {\n    set: (key:string, value: any) => {\n        if(!localStorage) return;\n        localStorage[key] = (typeof value) === 'string' ? value : JSON.stringify(value);\n    },\n    get: (key:string) => {\n        if(!localStorage) return null;\n\n        if(!localStorage[key]) {\n            return null;\n        }\n\n        try {\n            const parsed = JSON.parse(localStorage[key]);\n            return parsed;\n        } catch(e) {\n            return localStorage[key];\n        }\n    },\n    remove: (key:string) => {\n        if(!localStorage) return null;\n\n        if(localStorage[key]) {\n            localStorage.removeItem(key);\n        }\n    }\n};\n\nexport default storage;"]},"metadata":{},"sourceType":"module"}