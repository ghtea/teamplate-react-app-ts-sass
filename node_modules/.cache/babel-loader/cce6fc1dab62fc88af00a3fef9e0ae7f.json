{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport Cookies from 'js-cookie';\nimport * as config from 'config';\nimport * as actionsStatus from \"store/actions/status\";\nimport * as actionsAuth from \"store/actions/auth\";\nimport * as actionsNotification from \"store/actions/notification\";\n\nconst requestLogCheck = () => {\n  return axios.get(`${config.URL_BACK}/auth/log-check`, {\n    withCredentials: true\n  }).then(response => {\n    //console.log(response)\n    return response;\n  }).catch(error => {\n    //console.log(error.response)\n    return error.response;\n  });\n};\n\nfunction* logCheck(action) {\n  try {\n    yield put(actionsStatus.return__REPLACE({\n      listKey: ['ready', 'user'],\n      replacement: false\n    }));\n    yield put(actionsStatus.return__REPLACE({\n      listKey: ['loading', 'user'],\n      replacement: true\n    }));\n    const loggedIn = Cookies.get('logged_in');\n\n    if (!loggedIn) {\n      console.log(\"no logged in user\"); //replaceDataAuth(\"user\", {});\n\n      yield put(actionsAuth.return__REPLACE({\n        listKey: ['loading', 'user'],\n        replacement: false\n      }));\n      yield put(actionsStatus.return__REPLACE({\n        listKey: ['ready', 'user'],\n        replacement: false\n      }));\n      return; // 로그인 정보가 없다면 여기서 멈춥니다.\n    } else {\n      const res = yield call(requestLogCheck);\n      console.log(res);\n      const codeSituation = res.data.codeSituation;\n\n      if (codeSituation === 'LogCheck_Succeeded') {\n        //Cookies.remove('logged');\n        console.log(res.data.payload);\n        yield put(actionsStatus.return__REPLACE({\n          listKey: ['loading', 'user'],\n          replacement: false\n        }));\n        yield put(actionsStatus.return__REPLACE({\n          listKey: ['ready', 'user'],\n          replacement: true\n        }));\n      } else {\n        console.log(codeSituation); // SignUp_UnknownError, SignUp_DuplicateEmail\n\n        yield put(actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n          codeSituation: codeSituation\n        }));\n        yield put(actionsStatus.return__REPLACE({\n          listKey: ['loading', 'user'],\n          replacement: false\n        }));\n        yield put(actionsStatus.return__REPLACE({\n          listKey: ['ready', 'user'],\n          replacement: false\n        }));\n        Cookies.remove('logged_in');\n      }\n    } // higher else\n    // go to home\n\n  } catch (error) {\n    console.log(error);\n    console.log('log check has been failed');\n    yield put(actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n      codeSituation: 'LogCheck_UnknownError'\n    }));\n    yield put(actionsStatus.return__REPLACE({\n      listKey: ['loading', 'user'],\n      replacement: false\n    }));\n    yield put(actionsStatus.return__REPLACE({\n      listKey: ['ready', 'user'],\n      replacement: false\n    })); // clear inputs\n  }\n}\n\nexport default logCheck;","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/sagas/auth/logCheck.ts"],"names":["call","put","axios","Cookies","config","actionsStatus","actionsAuth","actionsNotification","requestLogCheck","get","URL_BACK","withCredentials","then","response","catch","error","logCheck","action","return__REPLACE","listKey","replacement","loggedIn","console","log","res","codeSituation","data","payload","return__ADD_CODE_SITUATION_SPECIAL","remove"],"mappings":"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","sourcesContent":["import { call, spawn, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport queryString from 'query-string';\n\nimport Cookies from 'js-cookie';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as config from 'config';\n\nimport * as actionsStatus from \"store/actions/status\";\nimport * as actionsAuth from \"store/actions/auth\";\nimport * as actionsNotification from \"store/actions/notification\";\n\n\n\ninterface BodyRequest {\n    email: string;\n    password: string;\n}\n\nconst requestLogCheck = () => {\n    \n    return axios.get(`${config.URL_BACK}/auth/log-check`, {withCredentials: true})\n    \n        .then(response => { \n        \t//console.log(response)\n        \treturn response;\n        })\n        .catch(error => {\n            //console.log(error.response)\n            return error.response;\n        });\n    \n};\n\n\nfunction* logCheck(action: actionsAuth.type__LOG_CHECK) {\n    try {\n        \n        yield put( actionsStatus.return__REPLACE({\n            listKey: ['ready', 'user'],\n            replacement: false\n        }) );\n        \n        yield put( actionsStatus.return__REPLACE({\n            listKey: ['loading', 'user'],\n            replacement: true\n        }) );\n        \n        const loggedIn = Cookies.get('logged_in') \n        \n        if(!loggedIn) {\n            \n            console.log(\"no logged in user\");\n            \n            //replaceDataAuth(\"user\", {});\n            yield put( actionsAuth.return__REPLACE({\n                listKey: ['loading', 'user'],\n                replacement: false\n            }) );\n            \n            yield put( actionsStatus.return__REPLACE({\n                listKey: ['ready', 'user'],\n                replacement: false\n            }) );\n            \n            \n            return; // 로그인 정보가 없다면 여기서 멈춥니다.\n        } \n        \n        else {\n        \n    \n            const res = yield call( requestLogCheck );\n            \n            console.log(res);\n            \n            const codeSituation = res.data.codeSituation;\n            \n            if (codeSituation === 'LogCheck_Succeeded') {\n                \n                //Cookies.remove('logged');\n                console.log(res.data.payload)\n                \n                yield put( actionsStatus.return__REPLACE({\n                    listKey: ['loading', 'user'],\n                    replacement: false\n                }) );\n                \n                yield put( actionsStatus.return__REPLACE({\n                    listKey: ['ready', 'user'],\n                    replacement: true\n                }) );\n            \n            }\n            else {\n                \n                console.log(codeSituation);\n                \n                // SignUp_UnknownError, SignUp_DuplicateEmail\n                yield put( actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n                    codeSituation: codeSituation\n                }) );\n                \n                \n                yield put( actionsStatus.return__REPLACE({\n                    listKey: ['loading', 'user'],\n                    replacement: false\n                }) );\n                \n                yield put( actionsStatus.return__REPLACE({\n                    listKey: ['ready', 'user'],\n                    replacement: false\n                }) );\n                \n                Cookies.remove('logged_in')\n            }\n            \n            \n        } // higher else\n    \n\n    // go to home\n        \n        \n    } catch (error) {\n        \n        console.log(error);\n        console.log('log check has been failed');\n        \n        yield put( actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n            codeSituation: 'LogCheck_UnknownError'\n        }) );\n        \n        \n        yield put( actionsStatus.return__REPLACE({\n            listKey: ['loading', 'user'],\n            replacement: false\n        }) );\n        \n        yield put( actionsStatus.return__REPLACE({\n            listKey: ['ready', 'user'],\n            replacement: false\n        }) );\n        // clear inputs\n    }\n}\n\nexport default logCheck;\n"]},"metadata":{},"sourceType":"module"}