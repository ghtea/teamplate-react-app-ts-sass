{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTranslation } from 'react-i18next';\n\nfunction useTranslationTyped() {\n  _s();\n\n  const {\n    t\n  } = useTranslation(); // implementation goes here. Here join keys by dot (depends on your options)\n\n  return {\n    t(...keys) {\n      return t(keys.join(\".\"));\n    }\n\n  };\n}\n/*\nfunction separateKey(stringAllKeys:string) {\n    return stringAllKeys.split(\".\");\n}\n*/\n\n\n_s(useTranslationTyped, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\nexport default useTranslationTyped; // https://stackoverflow.com/questions/58277973/how-to-type-check-i18n-dictionaries-with-typescript","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/tools/hooks/useTranslationTyped.ts"],"names":["useTranslation","useTranslationTyped","t","keys","join"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,eAA/B;;AAyBA,SAASC,mBAAT,GAA4E;AAAA;;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAQF,cAAc,EAA5B,CADwE,CAExE;;AACA,SAAO;AAEHE,IAAAA,CAAC,CAAC,GAAGC,IAAJ,EAAoB;AAEjB,aAAOD,CAAC,CAACC,IAAI,CAACC,IAAL,CAAU,GAAV,CAAD,CAAR;AAEH;;AANE,GAAP;AASH;AAED;AACA;AACA;AACA;AACA;;;GAlBSH,mB;UACSD,c;;;AAoBlB,eAAeC,mBAAf,C,CAIA","sourcesContent":["import { useTranslation } from 'react-i18next';\nimport translationEn from 'language/translation/en.json';\n\ntype Translation = typeof translationEn;\n\ntype Dictionary = string | DictionaryObject;\ntype DictionaryObject = { [ K1: string]: Dictionary };\n\ninterface TypedTFunction<D extends Dictionary> {\n    \n    <K1 extends keyof D>\n        (args: K1): D[K1];\n        \n    <K1 extends keyof D, K2 extends keyof D[K1]>\n        (...args: [K1, K2]): D[K1][K2];\n        \n    <K1 extends keyof D, K2 extends keyof D[K1], K3 extends keyof D[K1][K2]>\n        (...args: [K1, K2, K3]): D[K1][K2][K3];\n        \n    <K1 extends keyof D, K2 extends keyof D[K1], K3 extends keyof D[K1][K2], K4 extends keyof D[K1][K2][K3]>\n        (...args: [K1, K2, K3, K4]): D[K1][K2][K3][K4];  \n        \n    // ... up to a reasonable key parameters length of your choice ...\n}\n\nfunction useTranslationTyped(): { t: TypedTFunction<typeof translationEn> } {\n    const { t } = useTranslation();\n    // implementation goes here. Here join keys by dot (depends on your options)\n    return { \n        \n        t(...keys: string[]) { \n            \n            return t(keys.join(\".\")) \n            \n        } \n        \n    }\n}\n\n/*\nfunction separateKey(stringAllKeys:string) {\n    return stringAllKeys.split(\".\");\n}\n*/\n\n\nexport default useTranslationTyped;\n\n\n\n// https://stackoverflow.com/questions/58277973/how-to-type-check-i18n-dictionaries-with-typescript"]},"metadata":{},"sourceType":"module"}