{"ast":null,"code":"import { call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport Cookies from 'js-cookie';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as config from 'config';\nimport * as actionsStatus from \"store/actions/status\";\nimport * as actionsNotification from \"store/actions/notification\";\n\nconst requestSignUp = bodyRequest => {\n  return axios.post(`${config.URL_BACK}/auth/sign-up`, bodyRequest, {\n    withCredentials: true\n  }).then(response => {\n    //console.log(response)\n    return response;\n  }).catch(error => {\n    //console.log(error.response)\n    return error.response;\n  });\n};\n\nfunction* signUp(action) {\n  try {\n    console.log(action);\n\n    if (action.payload.email === \"\") {\n      console.log('type email address'); //addDeleteNotification(\"auth01\", language);\n    } else if (!/\\S+@\\S+\\.\\S+/.test(action.payload.email)) {\n      console.log('type valid email address'); //addDeleteNotification(\"auth021\", language);\n    } else if (action.payload.password1 === \"\" || action.payload.password2 === \"\") {\n      console.log('type both passwords'); //addDeleteNotification(\"auth03\", language);\n    } else if (action.payload.password1 !== action.payload.password2) {\n      console.log('two passwords are different'); //addDeleteNotification(\"auth04\", language);\n    } else if (action.payload.password1.length < 6) {\n      console.log('password is too short'); //addDeleteNotification(\"auth04\", language);\n    } else {\n      const bodyRequest = {\n        _id: uuidv4(),\n        email: action.payload.email,\n        password: action.payload.password1\n      };\n      const res = yield call(requestSignUp, bodyRequest);\n      console.log(res);\n      const codeSituation = res.data.codeSituation;\n\n      if (codeSituation === 'SignUp_Succeeded') {\n        //Cookies.remove('logged');\n        console.log(res.data.payload); // const user = res.data.payload;\n\n        Cookies.set('logged_in', 'yes', {\n          expires: 7,\n          path: '/'\n        });\n        yield put(actionsStatus.return__REPLACE({\n          listKey: ['ready', 'user'],\n          replacement: true\n        }));\n      } else {\n        console.log(codeSituation); // SignUp_UnknownError, SignUp_DuplicateEmail\n\n        yield put(actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n          codeSituation: codeSituation\n        }));\n      }\n    } // higher else\n    // go to home\n\n  } catch (error) {\n    console.log(error);\n    console.log('sign up has been failed');\n    yield put(actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n      codeSituation: 'SignUp_UnknownError'\n    }));\n  }\n}\n\nexport default signUp;","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/sagas/auth/signUp.ts"],"names":["call","put","axios","Cookies","v4","uuidv4","config","actionsStatus","actionsNotification","requestSignUp","bodyRequest","post","URL_BACK","withCredentials","then","response","catch","error","signUp","action","console","log","payload","email","test","password1","password2","length","_id","password","res","codeSituation","data","set","expires","path","return__REPLACE","listKey","replacement","return__ADD_CODE_SITUATION_SPECIAL"],"mappings":"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","sourcesContent":["import { call, spawn, put, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport queryString from 'query-string';\n\nimport Cookies from 'js-cookie';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as config from 'config';\n\nimport * as actionsStatus from \"store/actions/status\";\nimport * as actionsNotification from \"store/actions/notification\";\n\nimport * as actionsAuth from \"store/actions/auth\";\n//import * as actionsTheme from \"../../actions/theme\";\n\n\n\ninterface BodyRequest {\n    email: string;\n    password: string;\n}\n\nconst requestSignUp = (bodyRequest: BodyRequest) => {\n    \n    return axios.post(`${config.URL_BACK}/auth/sign-up`, bodyRequest, {withCredentials: true})\n    \n        .then(response => { \n        \t//console.log(response)\n        \treturn response;\n        })\n        .catch(error => {\n            //console.log(error.response)\n            return error.response;\n        });\n};\n\n\nfunction* signUp(action: actionsAuth.type__SIGN_UP) {\n    try {\n            console.log(action)\n        if (action.payload.email === \"\") {\n            console.log('type email address');\n            //addDeleteNotification(\"auth01\", language);\n        }\n        else if ( !(/\\S+@\\S+\\.\\S+/).test(action.payload.email) ){\n            console.log('type valid email address');\n            //addDeleteNotification(\"auth021\", language);\n        }\n        \n        else if (action.payload.password1 === \"\" || action.payload.password2 === \"\") {\n            console.log('type both passwords');\n            //addDeleteNotification(\"auth03\", language);\n        }\n        else if (action.payload.password1 !== action.payload.password2) {\n            console.log('two passwords are different');\n            //addDeleteNotification(\"auth04\", language);\n        }\n        else if (action.payload.password1.length < 6) {\n            console.log('password is too short');\n            //addDeleteNotification(\"auth04\", language);\n        }\n        \n        else {\n            \n            const bodyRequest = {\n                _id: uuidv4(),\n                email: action.payload.email, \n                password: action.payload.password1\n            };\n            \n           \n            \n            const res = yield call( requestSignUp, bodyRequest );\n            console.log(res);\n            \n            const codeSituation = res.data.codeSituation;\n            \n            if (codeSituation === 'SignUp_Succeeded') {\n                \n                //Cookies.remove('logged');\n                console.log(res.data.payload)\n                // const user = res.data.payload;\n                Cookies.set('logged_in', 'yes', { expires: 7, path: '/' });  \n                \n                yield put( actionsStatus.return__REPLACE({\n                    listKey: ['ready', 'user'],\n                    replacement: true\n                }) );\n            \n            }\n            else {\n                \n                console.log(codeSituation);\n                // SignUp_UnknownError, SignUp_DuplicateEmail\n                yield put( actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n                    codeSituation: codeSituation\n                }) );\n            \n            }\n              \n            \n        } // higher else\n    \n\n    // go to home\n        \n        \n    } catch (error) {\n        \n        console.log(error);\n        console.log('sign up has been failed');\n        \n        yield put( actionsNotification.return__ADD_CODE_SITUATION_SPECIAL({\n            codeSituation: 'SignUp_UnknownError'\n        }) );\n    }\n}\n\nexport default signUp;\n"]},"metadata":{},"sourceType":"module"}