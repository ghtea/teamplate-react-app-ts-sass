{"ast":null,"code":"import { delay, put, select } from \"redux-saga/effects\";\nimport * as actionsNotification from \"store/actions/notification\";\nimport { v4 as uuidv4 } from 'uuid';\nimport instanceI18n from 'language/i18n';\nimport catalogSituation from 'language/catalogSituation';\n\nfunction* addDeleteBanner(action) {\n  const listBannerPrevious = yield select(state => state.notification.listBanner);\n  const id = uuidv4();\n  /*\n  let id:string = '';\n  \n  if (action.payload.id){\n    id = action.payload.id;\n  }\n  else {\n    id = uuidv4();\n  }\n  */\n\n  const codeSituation = action.payload.codeSituation;\n  const kindSituation = catalogSituation[codeSituation]['kind'];\n  const message = instanceI18n.t(`Notification.${codeSituation}`);\n  console.log(message);\n  let levelTimeBanner = 'normal';\n\n  if (kindSituation === 'success') {\n    levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'short';\n  } else if (kindSituation === 'hint') {\n    levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'normal';\n  } else if (kindSituation === 'error') {\n    levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'long';\n  } else if (kindSituation === 'warning') {\n    levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'normal';\n  }\n\n  let msTime = actionsNotification.MsTimeBanner[levelTimeBanner];\n  const bannerAdding = {\n    id: id,\n    codeSituation: codeSituation,\n    kindSituation: kindSituation,\n    message: message,\n    msTime: msTime\n  };\n  const listBannerNew = [bannerAdding, ...listBannerPrevious];\n  yield put(actionsNotification.return__REPLACE({\n    listKey: ['listBanner'],\n    replacement: listBannerNew\n  }));\n\n  if (levelTimeBanner !== 'lasting') {\n    yield delay(msTime);\n    yield put(actionsNotification.return__DELETE_BANNER({\n      id: id\n    }));\n  }\n}\n\nexport default addDeleteBanner;","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/sagas/notification/addDeleteBanner.ts"],"names":["delay","put","select","actionsNotification","v4","uuidv4","instanceI18n","catalogSituation","addDeleteBanner","action","listBannerPrevious","state","notification","listBanner","id","codeSituation","payload","kindSituation","message","t","console","log","levelTimeBanner","msTime","MsTimeBanner","bannerAdding","listBannerNew","return__REPLACE","listKey","replacement","return__DELETE_BANNER"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,GAAhB,EAAgCC,MAAhC,QAA8C,oBAA9C;AAEA,OAAO,KAAKC,mBAAZ,MAAqC,4BAArC;AAIA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,gBAAP,MAA8C,2BAA9C;;AAGA,UAAUC,eAAV,CAA0BC,MAA1B,EAA+E;AAE3E,QAAMC,kBAA4B,GAAI,MAAMR,MAAM,CAAGS,KAAD,IAAqBA,KAAK,CAACC,YAAN,CAAmBC,UAA1C,CAAlD;AAEA,QAAMC,EAAE,GAAGT,MAAM,EAAjB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMU,aAAqB,GAAGN,MAAM,CAACO,OAAP,CAAeD,aAA7C;AAEA,QAAME,aAA4B,GAAGV,gBAAgB,CAACQ,aAAD,CAAhB,CAAgC,MAAhC,CAArC;AAEA,QAAMG,OAAe,GAAGZ,YAAY,CAACa,CAAb,CAAgB,gBAAeJ,aAAc,EAA7C,CAAxB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAGA,MAAII,eAAmD,GAAG,QAA1D;;AAGA,MAAKL,aAAa,KAAK,SAAvB,EAAiC;AAC/BK,IAAAA,eAAe,GAAGf,gBAAgB,CAACQ,aAAD,CAAhB,CAAgC,iBAAhC,KAAsD,OAAxE;AACD,GAFD,MAGK,IAAKE,aAAa,KAAK,MAAvB,EAA8B;AACjCK,IAAAA,eAAe,GAAGf,gBAAgB,CAACQ,aAAD,CAAhB,CAAgC,iBAAhC,KAAsD,QAAxE;AACD,GAFI,MAGA,IAAKE,aAAa,KAAK,OAAvB,EAA+B;AAClCK,IAAAA,eAAe,GAAGf,gBAAgB,CAACQ,aAAD,CAAhB,CAAgC,iBAAhC,KAAsD,MAAxE;AACD,GAFI,MAGA,IAAKE,aAAa,KAAK,SAAvB,EAAiC;AACpCK,IAAAA,eAAe,GAAGf,gBAAgB,CAACQ,aAAD,CAAhB,CAAgC,iBAAhC,KAAsD,QAAxE;AACD;;AAED,MAAIQ,MAAwC,GAAGpB,mBAAmB,CAACqB,YAApB,CAAiCF,eAAjC,CAA/C;AAEA,QAAMG,YAAY,GAAG;AACnBX,IAAAA,EAAE,EAAEA,EADe;AAEnBC,IAAAA,aAAa,EAAEA,aAFI;AAGnBE,IAAAA,aAAa,EAAEA,aAHI;AAInBC,IAAAA,OAAO,EAAEA,OAJU;AAKnBK,IAAAA,MAAM,EAAEA;AALW,GAArB;AAQA,QAAMG,aAAa,GAAG,CAACD,YAAD,EAAe,GAAGf,kBAAlB,CAAtB;AAGA,QAAMT,GAAG,CAAEE,mBAAmB,CAACwB,eAApB,CAAoC;AAC3CC,IAAAA,OAAO,EAAE,CAAC,YAAD,CADkC;AAE3CC,IAAAA,WAAW,EAAEH;AAF8B,GAApC,CAAF,CAAT;;AAKA,MAAIJ,eAAe,KAAK,SAAxB,EAAkC;AAChC,UAAMtB,KAAK,CAAEuB,MAAF,CAAX;AAEA,UAAMtB,GAAG,CAAEE,mBAAmB,CAAC2B,qBAApB,CAA0C;AACjDhB,MAAAA,EAAE,EAAEA;AAD6C,KAA1C,CAAF,CAAT;AAGD;AAEJ;;AAED,eAAeN,eAAf","sourcesContent":["import { delay, put, takeEvery, select } from \"redux-saga/effects\";\n\nimport * as actionsNotification from \"store/actions/notification\";\nimport {Banner} from \"store/reducers/notification\";\nimport {StateRoot} from 'store/reducers';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport instanceI18n from 'language/i18n';\nimport catalogSituation, {KindSituation} from 'language/catalogSituation';\n\n\nfunction* addDeleteBanner(action: actionsNotification.type__ADD_DELETE_BANNER) {\n    \n    const listBannerPrevious: Banner[] =  yield select( (state:StateRoot) => state.notification.listBanner ); \n        \n    const id = uuidv4();\n    /*\n    let id:string = '';\n    \n    if (action.payload.id){\n      id = action.payload.id;\n    }\n    else {\n      id = uuidv4();\n    }\n    */\n    \n    const codeSituation: string = action.payload.codeSituation;\n    \n    const kindSituation: KindSituation = catalogSituation[codeSituation]['kind'];\n    \n    const message: string = instanceI18n.t(`Notification.${codeSituation}`);\n    console.log(message);\n    \n    \n    let levelTimeBanner:actionsNotification.LevelTimeBanner = 'normal';\n    \n    \n    if ( kindSituation === 'success'){\n      levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'short';\n    }\n    else if ( kindSituation === 'hint'){\n      levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'normal';\n    }\n    else if ( kindSituation === 'error'){\n      levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'long';\n    }\n    else if ( kindSituation === 'warning'){\n      levelTimeBanner = catalogSituation[codeSituation]['levelTimeBanner'] || 'normal';\n    }\n    \n    let msTime: actionsNotification.MsTimeBanner = actionsNotification.MsTimeBanner[levelTimeBanner];\n    \n    const bannerAdding = {\n      id: id,  \n      codeSituation: codeSituation, \n      kindSituation: kindSituation,\n      message: message,\n      msTime: msTime \n    }\n    \n    const listBannerNew = [bannerAdding, ...listBannerPrevious];\n        \n        \n    yield put( actionsNotification.return__REPLACE({\n        listKey: ['listBanner'],\n        replacement: listBannerNew\n    }) );\n    \n    if (levelTimeBanner !== 'lasting'){\n      yield delay( msTime );\n    \n      yield put( actionsNotification.return__DELETE_BANNER({\n          id: id\n      }) );\n    }\n    \n}\n\nexport default addDeleteBanner;\n"]},"metadata":{},"sourceType":"module"}