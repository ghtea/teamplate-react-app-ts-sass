{"ast":null,"code":"import produce from 'immer';\nimport { handleActions } from 'redux-actions';\nimport * as actionsNotification from 'store/actions/notification';\n//import { v4 as uuidv4 } from 'uuid';\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject'; //import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n//import catalogSituation from 'language/catalogSituation';\n//import addNotification from './notification/addNotification';\n// https://react-etc.vlpt.us/07.typescript-redux.html\n//export type State = typeof stateInitial;\n\nconst stateInitial = {\n  listBanner: [],\n  listCodeSituationSpecial: []\n};\nconst reducerNotification = handleActions({\n  [actionsNotification.name__REPLACE]: (statePrevious, action) => {\n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) {\n        return;\n      } else {\n        const listKey = action.payload.listKey;\n\n        try {\n          putValueToNestedObject(stateNew, listKey, action.payload.replacement);\n        } catch {\n          return;\n        }\n      }\n    });\n  }\n}, stateInitial); // key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerNotification = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case notification.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\nexport default reducerNotification;\n/*\nconst notificationReducer = handleActions({\n  \n  \n  [notification.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/reducers/notification.ts"],"names":["produce","handleActions","actionsNotification","putValueToNestedObject","stateInitial","listBanner","listCodeSituationSpecial","reducerNotification","name__REPLACE","statePrevious","action","stateNew","payload","undefined","listKey","replacement"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAKA,OAAO,KAAKC,mBAAZ,MAAqC,4BAArC;AAGA;AACA,OAAOC,sBAAP,MAAmC,sCAAnC,C,CACA;AACA;AAEA;AAEA;AAEA;;AAqBA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAInBC,EAAAA,wBAAwB,EAAE;AAJP,CAArB;AAUA,MAAMC,mBAAmB,GAAGN,aAAa,CAAa;AAEpD,GAACC,mBAAmB,CAACM,aAArB,GAAqC,CAACC,aAAD,EAAgBC,MAAhB,KAA8D;AAEjG,WAAOV,OAAO,CAACS,aAAD,EAAgBE,QAAQ,IAAI;AACxC,UAAID,MAAM,CAACE,OAAP,KAAmBC,SAAvB,EAAkC;AAChC;AACD,OAFD,MAGK;AACH,cAAMC,OAA4B,GAAGJ,MAAM,CAACE,OAAP,CAAeE,OAApD;;AAEA,YAAI;AAAEX,UAAAA,sBAAsB,CAACQ,QAAD,EAAWG,OAAX,EAAoBJ,MAAM,CAACE,OAAP,CAAeG,WAAnC,CAAtB;AAEL,SAFD,CAGA,MAAM;AACJ;AACD;AAEF;AAEF,KAhBa,CAAd;AAiBD;AArBmD,CAAb,EAwBtCX,YAxBsC,CAAzC,C,CA4BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeG,mBAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import produce from 'immer';\nimport {handleActions} from 'redux-actions';\n\nimport instanceI18n from 'language/i18n';\n\n\nimport * as actionsNotification from 'store/actions/notification';\nimport {CatalogSituation, KindSituation} from 'language/catalogSituation';\n\n//import { v4 as uuidv4 } from 'uuid';\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject';\n//import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n//import catalogSituation from 'language/catalogSituation';\n\n//import addNotification from './notification/addNotification';\n\n// https://react-etc.vlpt.us/07.typescript-redux.html\n\n//export type State = typeof stateInitial;\n\n\nexport type Banner = {\n  id: string,  \n  codeSituation: string, \n  kindSituation: KindSituation,\n  message: string,\n  msTime: number \n}\n\n\n//export type State = typeof stateInitial;\n\n\nexport type State = {\n  listBanner: Banner[],\n  listCodeSituationSpecial: string[]\n}\n\n\nconst stateInitial = {\n  \n  listBanner: [],\n  \n  listCodeSituationSpecial: []\n  \n};\n\n\n\nconst reducerNotification = handleActions<State, any>({\n  \n  [actionsNotification.name__REPLACE]: (statePrevious, action: actionsNotification.type__REPLACE) => {\n    \n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) { \n        return;\n      }\n      else {\n        const listKey: (string | number)[] = action.payload.listKey;\n        \n        try { putValueToNestedObject(stateNew, listKey, action.payload.replacement); \n          \n        }\n        catch {\n          return;\n        }\n        \n      }\n      \n    });\n  }\n \n  \n}, stateInitial);\n\n\n\n// key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerNotification = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case notification.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\n\n\nexport default reducerNotification;\n\n\n/*\nconst notificationReducer = handleActions({\n  \n  \n  [notification.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}