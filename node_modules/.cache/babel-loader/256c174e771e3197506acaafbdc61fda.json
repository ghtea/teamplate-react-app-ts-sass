{"ast":null,"code":"var _jsxFileName = \"/workspace/teamplate-react-app-ts-sass/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { ThemeProvider } from 'styled-components';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actionsStatus from 'store/actions/status';\nimport * as actionsAuth from 'store/actions/auth';\nimport { themeLight } from \"./styles/theme\";\nimport GlobalStyle from 'styles/GlobalStyle';\nimport 'styles/importFonts.css';\nimport Nav from \"./components/Nav\";\nimport Content from \"./components/Content\";\nimport FullPage from \"./components/FullPage\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\"; // TS  https://velog.io/@velopert/create-typescript-react-component\n\nfunction App({}) {\n  _s();\n\n  let location = useLocation();\n  const dispatch = useDispatch();\n  const [isFullPage, setIsFullPage] = useState(false);\n  const listFullPage = ['/log-in', '/sign-up', '/lost'];\n  useEffect(() => {\n    const listMatched = location.pathname.match(/\\/[^\\/]+/);\n    let pathFirst = '/';\n\n    if (listMatched !== null) {\n      pathFirst = listMatched[0];\n    } //console.log(listMatched)\n    //console.log(pathFirst)\n\n\n    if (listFullPage.includes(pathFirst)) {\n      setIsFullPage(true);\n    } else {\n      setIsFullPage(false);\n    }\n  }, [location]); // read languge from result of i18Next detector\n\n  useEffect(() => {\n    dispatch(actionsStatus.return__READ_LANGUAGE());\n  }, []);\n  const nameThemeCurrent = useSelector(state => state['status']['current']['theme']['name']);\n  useEffect(() => {\n    dispatch(actionsStatus.return__READ_OPTION_THEME());\n  }, []);\n  const themeCurrent = useMemo(() => {\n    if (nameThemeCurrent === 'dark') {\n      console.log('dark theme');\n      return themeLight;\n    } else {\n      return themeLight;\n    }\n  }, [nameThemeCurrent]); // log check\n\n  useEffect(() => {\n    dispatch(actionsAuth.return__LOG_CHECK());\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: themeCurrent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Notification, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), isFullPage && /*#__PURE__*/React.createElement(FullPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 22\n    }\n  }), !isFullPage && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(App, \"oh0Jpm/Hv4fokjPJPt87KB1nAIQ=\", false, function () {\n  return [useLocation, useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/App.tsx"],"names":["React","useEffect","useState","useMemo","useLocation","ThemeProvider","useSelector","useDispatch","actionsStatus","actionsAuth","themeLight","GlobalStyle","Nav","Content","FullPage","Modal","Notification","App","location","dispatch","isFullPage","setIsFullPage","listFullPage","listMatched","pathname","match","pathFirst","includes","return__READ_LANGUAGE","nameThemeCurrent","state","return__READ_OPTION_THEME","themeCurrent","console","log","return__LOG_CHECK"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useMemo} from 'react';\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport styled, {ThemeProvider }  from 'styled-components';\n\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {StateRoot} from 'store/reducers';\nimport * as actionsStatus from 'store/actions/status';\nimport * as actionsAuth from 'store/actions/auth';\n\nimport { Theme, themeLight } from \"./styles/theme\";\nimport GlobalStyle from 'styles/GlobalStyle';\nimport 'styles/importFonts.css';\n\nimport Nav from \"./components/Nav\";\nimport Content from \"./components/Content\";\nimport FullPage from \"./components/FullPage\";\nimport Modal from \"./components/Modal\";\nimport Notification from \"./components/Notification\";\n\n// TS  https://velog.io/@velopert/create-typescript-react-component\ntype PropsApp = {};\n\nfunction App({}: PropsApp) {\n  \n  let location = useLocation();\n  const dispatch = useDispatch();\n  \n  \n  \n  const [isFullPage, setIsFullPage] = useState(false);\n  const listFullPage : string[] = [\n    '/log-in', '/sign-up', '/lost'\n  ];\n  useEffect(() => {\n    \n    const listMatched: RegExpMatchArray | null = (location.pathname).match( /\\/[^\\/]+/ );\n    let pathFirst: string = '/';\n    if (listMatched !== null){\n      pathFirst = listMatched[0];\n    }\n    //console.log(listMatched)\n    //console.log(pathFirst)\n    \n    if (listFullPage.includes(pathFirst)){\n      setIsFullPage(true);\n    }\n    else {\n      setIsFullPage(false);\n    }\n    \n  }, [location]);\n  \n  \n  \n  // read languge from result of i18Next detector\n  useEffect(() => {\n    dispatch(actionsStatus.return__READ_LANGUAGE() );\n  }, []);\n  \n  \n  \n  const nameThemeCurrent:string = useSelector((state: StateRoot) => state['status']['current']['theme']['name']);\n  \n  useEffect(() => {\n    dispatch(actionsStatus.return__READ_OPTION_THEME() );\n  }, []);\n  \n  const themeCurrent:Theme = useMemo(\n    () => {\n      if (nameThemeCurrent === 'dark') {\n        console.log('dark theme')\n        return themeLight;\n      }\n      else {\n        return themeLight;\n      }\n    },[nameThemeCurrent]\n  );\n  \n  \n  // log check\n  useEffect(() => {\n    dispatch(actionsAuth.return__LOG_CHECK() );\n  }, []);\n  \n  \n  \n  return (\n    \n    <ThemeProvider \n      theme={ themeCurrent }\n    >\n    \n      <GlobalStyle />\n      \n      <Notification />\n      <Modal />\n      \n      {isFullPage && <FullPage/>}\n      \n      {!isFullPage && \n        <>\n          <Nav/>\n          <Content/>\n        </>\n      }\n      \n    </ThemeProvider>\n    \n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}