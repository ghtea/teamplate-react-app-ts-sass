{"ast":null,"code":"import produce from 'immer';\nimport { handleActions } from 'redux-actions';\nimport * as actionsStatus from 'store/actions/status';\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject'; //import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n// https://react-etc.vlpt.us/07.typescript-redux.html\n\nconst stateInitial = {\n  loading: {\n    user: false\n  },\n  ready: {\n    user: false\n  },\n  current: {\n    language: 'en',\n    // en, ko, ja\n    theme: {\n      option: 'light',\n      name: 'themeLight'\n    }\n  },\n  showing: {\n    nav: {\n      all: true,\n      boardNav1: false\n    },\n    modal: {\n      setting: false\n    }\n  }\n};\nconst reducerStatus = handleActions({\n  [actionsStatus.name__REPLACE]: (statePrevious, action) => {\n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) {\n        return;\n      } else {\n        const listKey = action.payload.listKey;\n\n        try {\n          putValueToNestedObject(stateNew, listKey, action.payload.replacement);\n        } catch {\n          return;\n        }\n      }\n    });\n  }\n}, stateInitial); // key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerStatus = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case status.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\nexport default reducerStatus;\n/*\nconst statusReducer = handleActions({\n  \n  \n  [status.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/","map":{"version":3,"sources":["/workspace/teamplate-react-app-ts-sass/src/store/reducers/status.ts"],"names":["produce","handleActions","actionsStatus","putValueToNestedObject","stateInitial","loading","user","ready","current","language","theme","option","name","showing","nav","all","boardNav1","modal","setting","reducerStatus","name__REPLACE","statePrevious","action","stateNew","payload","undefined","listKey","replacement"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAEA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;AAEA,OAAOC,sBAAP,MAAmC,sCAAnC,C,CACA;AAGA;;AAMA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC,GAFU;AAMnBC,EAAAA,KAAK,EAAE;AACLD,IAAAA,IAAI,EAAE;AADD,GANY;AAUnBE,EAAAA,OAAO,EAAE;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAEW;AAGlBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,OADH;AAELC,MAAAA,IAAI,EAAE;AAFD;AALA,GAVU;AAqBnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE,IADF;AAEHC,MAAAA,SAAS,EAAE;AAFR,KADE;AAKPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE;AADJ;AALA;AArBU,CAArB;AAoCA,MAAMC,aAAa,GAAGlB,aAAa,CAAa;AAE9C,GAACC,aAAa,CAACkB,aAAf,GAA+B,CAACC,aAAD,EAAgBC,MAAhB,KAAwD;AAErF,WAAOtB,OAAO,CAACqB,aAAD,EAAgBE,QAAQ,IAAI;AACxC,UAAID,MAAM,CAACE,OAAP,KAAmBC,SAAvB,EAAkC;AAChC;AACD,OAFD,MAGK;AACH,cAAMC,OAA4B,GAAGJ,MAAM,CAACE,OAAP,CAAeE,OAApD;;AAEA,YAAI;AAAEvB,UAAAA,sBAAsB,CAACoB,QAAD,EAAWG,OAAX,EAAoBJ,MAAM,CAACE,OAAP,CAAeG,WAAnC,CAAtB;AAEL,SAFD,CAGA,MAAM;AACJ;AACD;AAEF;AAEF,KAhBa,CAAd;AAiBD;AArB6C,CAAb,EAuBhCvB,YAvBgC,CAAnC,C,CA2BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAee,aAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import produce from 'immer';\nimport {handleActions} from 'redux-actions';\n\nimport * as actionsStatus from 'store/actions/status';\n\nimport putValueToNestedObject from 'tools/vanilla/putValueToNestedObject';\n//import defaultUsingColorAssignment from '../../styles/defaultUsingColorAssignment'\n\n\n// https://react-etc.vlpt.us/07.typescript-redux.html\n\nexport type State = typeof stateInitial;\n\n\n\nconst stateInitial = {\n  \n  loading: {\n    user: false\n  },\n  \n  ready: {\n    user: false\n  },\n  \n  current: {\n    \n    language: 'en',   // en, ko, ja\n    \n    \n    theme: {\n      option: 'light',\n      name: 'themeLight'\n    }\n  },\n  \n  showing: {\n    nav: {\n      all: true,\n      boardNav1: false\n    },\n    modal: {\n      setting: false\n    }\n  }\n  \n  \n};\n\n\n\nconst reducerStatus = handleActions<State, any>({\n  \n  [actionsStatus.name__REPLACE]: (statePrevious, action: actionsStatus.type__REPLACE) => {\n    \n    return produce(statePrevious, stateNew => {\n      if (action.payload === undefined) { \n        return;\n      }\n      else {\n        const listKey: (string | number)[] = action.payload.listKey;\n        \n        try { putValueToNestedObject(stateNew, listKey, action.payload.replacement); \n          \n        }\n        catch {\n          return;\n        }\n        \n      }\n      \n    });\n  }\n  \n}, stateInitial);\n\n\n\n// key가 차례대로 적혀있는 list를 이용해서 object access 하기!\n// https://medium.com/better-programming/4-ways-to-safely-access-nested-objects-in-vanilla-javascript-8671d09348a8\n\n/*\nconst reducerStatus = (statePrevious: typeState = stateInitial, action: any): typeState => {\n  switch (action.type) {\n    \n    case status.REPLACE:\n      \n      return produce(statePrevious, stateNew => {\n        if (action.payload === undefined) { \n          return;\n        }\n        else {\n          const listKey: string[] = action.payload.listKey;\n          if (Array.isArray(listKey)) {\n            \n            console.log(stateNew);\n            \n            const location = listKey.reduce( (obj: any, key: string) => {\n              return obj[key]; \n            }, stateNew);\n            \n          }\n      }\n      \n    });\n    \n    \n    default:\n      return statePrevious;\n  }\n}\n\n*/\n\n\n\nexport default reducerStatus;\n\n\n/*\nconst statusReducer = handleActions({\n  \n  \n  [status.REPLACE_STATUS]: (state, action) => {\n    //console.log('hiiii');\n    \n    const location = action['payload']['location'] || [];\n    \n    if (!location || location.length === 0) {\n      return state;\n    }\n    else {\n      return state.setIn(location, Immutable.fromJS(action['payload']['replacement']) );\n    }\n    \n  },\n  \n  \n}, stateInitial);\n\n*/\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}